@{
    ViewData["Title"] = "Home Page";
}
@model IEnumerable<PostViewModel>

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Фиксированный макет с прокручиваемым центральным блоком</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-EVSTQN3/azprG1Anm3QDgpJLIm9Nao0Yz1ztcQTwFspd3yD65VohhpuuCOmLASjC" crossorigin="anonymous">
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/js/bootstrap.bundle.min.js" integrity="sha384-MrcW6ZMFYlzcLA8Nl+NtUVF0sA7MsXsP1UyJoMp4YLEuNSfAP+JcXn/tWtIaxVXM" crossorigin="anonymous"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/js/bootstrap.min.js" integrity="sha384-cVKIPhGWiC2Al4u+LWgxfKTRIcfu0JTxR+EQDz/bgldoEyl4H0zUF0QKbrJ0EcQF" crossorigin="anonymous"></script>

    <style>
        body {
            background-image: src:"../../wwwroot/images/vgkcb6t7xfrb1.jpg";
            background-size: cover; 
            background-repeat: no-repeat; 
            background-attachment: fixed; 
            background-position: center; 
        }

        .parallelogram {
            width: 200px;
            height: 250px;
            position: relative;
            -webkit-transform: skew(20deg);
            -moz-transform: skew(20deg);
            -o-transform: skew(20deg);
            transform: skew(20deg);

        }

        .characterImage {
            width: auto;
            height: 250px;
            position: absolute;
            top:50%;
            left: 25%;
            -webkit-transform: skew(-20deg) translate(-50%, -50%) scaleX(-1);
            -moz-transform: skew(-20deg) translate(-50%, -50%) scaleX(-1);
            -o-transform: skew(-20deg) translate(-50%, -50%) scaleX(-1);
            transform: skew(-20deg) translate(-50%, -50%) scaleX(-1);
        }

        .personImage {
            display: flex;
            justify-content: center; 
            align-items: center;
            width: 100%;
        }

        .post{
            border-radius:10px;
            height:auto;
            margin:10px;
        }
    </style>

</head>
<body >

    <div class="container-fluid">
        <div class="d-flex justify-content-between align-items-center position-absolute start-0 end-0 p-3">
            <button class="btn btn-dark text-white" type="button" data-bs-toggle="offcanvas"
                    data-bs-target="#offcanvasScrolling" aria-controls="offcanvasScrolling">
                Filters
            </button>
            <button class="btn btn-dark text-white" type="button" data-bs-toggle="offcanvas"
                    data-bs-target="#offcanvasRight" aria-controls="offcanvasRight">
                Blogs
            </button>
        </div>
    </div>

    <div class="container" style="margin-top:10px">
        <div class="row">
            <div class="col-sm-2 col-md-3"></div>
            <div class="col-sm-4 col-md-6">
                <div class="content" id="postsContainer">

                </div>
                <button id="loadMoreButton" style="display: none;">Загрузить ещё</button>
            </div>
            <div class="col-sm-2 col-md-3"></div>
        </div>
    </div>


    <div class="offcanvas offcanvas-start bg-dark bg-opacity-50 text-white"
         data-bs-scroll="true"
         data-bs-backdrop="false" tabindex="-1"
         id="offcanvasScrolling" aria-labelledby="offcanvasScrollingLabel">

        <div class="offcanvas-header bg-dark bg-opacity-25">
            <h5 class="offcanvas-title" id="offcanvasScrollingLabel">Filters</h5>
            <button type="button" class="btn-close text-reset" data-bs-dismiss="offcanvas" aria-label="Close"></button>
        </div>

           

        <div class="offcanvas-body bg-dark bg-opacity-25">
            <p>Try scrolling the rest of the page to see this option in action.</p>
            <h1>Filter Posts</h1>
            <h1>Theme</h1>
            <select id="themeSelect" name="theme">
                <option value="">Оберіть тему...</option>
            </select>
            <h2>Гра</h2>
            <select id="gameSelect" name="Game" >
                <option value="">Оберіть гру...</option>
            </select>
            <button id="applyFilters">Apply Filters</button>
        </div>

        <div class="personImage bg-dark bg-opacity-50">
            <div class="parallelogram">
                <img class="characterImage" id="character"
                     src="~/images/image-removebg-preview.png">
            </div>
        </div>
    </div>


    <div class="offcanvas offcanvas-end" tabindex="-1"
         id="offcanvasRight" data-bs-scroll="true"
         data-bs-backdrop="false"
         aria-labelledby="offcanvasRightLabel">

        <div class="offcanvas-header">
            <h5 id="offcanvasRightLabel">Offcanvas right</h5>
            <button type="button" class="btn-close text-reset" data-bs-dismiss="offcanvas" aria-label="Close"></button>
        </div>
        <div class="offcanvas-body">
            <p>Try scrolling the rest of the page to see this option in action.</p>
        </div>
    </div>

</body>

<script>
    $.ajax({
        url: '@Url.Action("GetThemes", "Blogs")',
        method: 'GET',
        success: function (data) {
            data.forEach(function (theme) {
                $("#themeSelect").append(`<option value="${theme.name}">${theme.name}</option>`);
            });
        },
        error: function (error) {
            console.log("Ошибка при загрузке тем: ", error);
        }
    });

    $(document).ready(function () {
        $.ajax({
            url: '@Url.Action("GetGames", "Posts")',
            method: 'GET',
            success: function (games) {
                games.forEach(function (game) {
                    $("#gameSelect").append(`<option value="${game.gameName}">${game.gameName}</option>`);
                });
            },
            error: function () {
                console.error("Не удалось загрузить список игр.");
            }
        });
    });
</script>

<script>
    $(document).ready(function () {
        let currentPage = 1;
        const postsPerPage = 2;

        function loadPosts() {
            const filterGame = $('#gameSelect').val();
            const filterTheme = $('#themeSelect').val();

            if (filterGame != "" & filterGame != null) {
                $.ajax({
                    url: '@Url.Action("GetGame", "Game")',
                    method: 'GET',
                    dataType: 'json',
                    data: {
                        gameName: filterGame
                    },
                    success: function (game) {
                        $('.parallelogram').css('background-color', game.color);
                        const character = document.getElementById('character');
                        character.src = `data:image/png;base64,${game.gameCharacter}`;
                    },
                    error: function () {
                        alert('Error loading posts.');
                    }
                });
            }
            else{
                $('.parallelogram').css('background-color', 'lightgray');
                character.src = '/images/image-removebg-preview.png';
            }
          


            $.ajax({
                url: '@Url.Action("GetPosts", "Posts")',
                method: 'GET',
                dataType: 'json',
                data: {
                    currentPage: currentPage,
                    postsPerPage: postsPerPage,
                    filterGame: filterGame,
                    filterTheme: filterTheme
                },
                success: function (posts) {
                    const container = document.getElementById('postsContainer');
                    const loadMoreButton = document.getElementById('loadMoreButton');

                    if (posts.length === 0 && currentPage === 1) {
                        container.innerHTML = '<p>No posts found.</p>';
                        loadMoreButton.style.display = 'none';
                        return;
                    }

                    if (posts.length === 0) {
                        loadMoreButton.style.display = 'none'; 
                        return;
                    }

                    let htmlContent = '';
                    posts.forEach(post => {
                        let postContent = '';
                        if (post.contents.length > 0) {
                            const firstContent = post.contents[0];
                            if (firstContent.contentType === 'Image') {
                                postContent = `<div><img src="data:image/png;base64,${firstContent.content}" alt="Image" class="img-fluid"></div>`;
                            } else if (firstContent.contentType === 'Video') {
                                postContent = `<video width="320" height="240" controls>
                                            <source src="data:video/mp4;base64,${firstContent.content}" type="video/mp4">
                                    </video>`;
                            } else if (firstContent.contentType === 'Text') {
                                const byteArray = Uint8Array.from(atob(firstContent.content), c => c.charCodeAt(0));
                                const decoder = new TextDecoder("utf-8");
                                const text = decoder.decode(byteArray);
                                postContent = `<div><p>${text}</p></div>`;
                            }
                        }
                        htmlContent += `
                                <div class="post" style="background-color:${post.color}">
                                    <div class="content">
                                        <h2 class="text-black text-center">
                                            <a href="/Posts/ReadPost/${post.id}">${post.title}</a>
                                        </h2>
                                        ${postContent}
                                        <br>
                                        <p>Author: ${post.authorName}</p>
                                    </div>
                                </div>
                                <br>
                            `;
                    });

                    container.innerHTML += htmlContent;
                    currentPage++; 
                    loadMoreButton.style.display = posts.length < postsPerPage ? 'none' : 'block';
                },
                error: function () {
                    alert('Error loading posts.');
                }
            });
        }

        document.getElementById('loadMoreButton').addEventListener('click', loadPosts);

        $('#applyFilters').click(applyFilter);
        function applyFilter() {
            const container = document.getElementById('postsContainer');
            currentPage = 1;
            container.innerHTML = "";
            loadPosts();
        }
        applyFilter();
    });
</script>




