@addTagHelper *, Microsoft.AspNetCore.Mvc.TagHelpers
@model WebApplication1.DbModels.Post
@{
    ViewData["Title"] = "Create post";
}
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Фиксированный макет с прокручиваемым центральным блоком</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
</head>

<h1>Редактор постов для блога: @Model.BlogId</h1>

<form asp-action="Create" asp-route-blogId="@Model.BlogId" id="postForm" method="post" enctype="multipart/form-data">
    <input type="hidden" name="BlogId" asp-for="BlogId" />

    <h2>Назва</h2>
    <input name="Title" asp-for="Title" class="form-control" required />
    <span asp-validation-for="Title" class="text-danger"></span>

    <h2>Гра</h2>
    <select id="gameSelect" name="Game" class="form-control" required>
        <option value="">Оберіть гру...</option>
    </select>
    <span asp-validation-for="Game" class="text-danger"></span>

    <h2>Контент</h2>
    <div id="contentModules">
        
    </div>

    <div class="buttons">
        <button type="button" id="addTextModule">Добавить текст</button>
        <button type="button" id="addImageModule">Добавить изображение</button>
        <button type="button" id="addVideoModule">Добавить видео</button>
    </div>

    <button type="submit" class="btn btn-primary">Сохранить пост</button>
</form>

<script>
    $(document).ready(function () {
        $.ajax({
            url: '@Url.Action("GetGames", "Posts")',
            method: 'GET',
            success: function (games) {
                games.forEach(function (game) {
                    $("#gameSelect").append(`<option value="${game.gameName}">${game.gameName}</option>`);
                });
            },
            error: function () {
                console.error("Не удалось загрузить список игр.");
            }
        });
    });

    $(document).on('change', 'input[type="file"]', function () {
        const fileInput = this;
        const file = fileInput.files[0];
        if (file) {
            const originalName = file.name;
            if (/^\d/.test(originalName)) {
                const newName = `file_${originalName}`;
                const dataTransfer = new DataTransfer();
                const renamedFile = new File([file], newName, { type: file.type });
                dataTransfer.items.add(renamedFile);
                fileInput.files = dataTransfer.files;
                console.log(`Имя файла изменено: ${originalName} -> ${newName}`);
            }
        }
    });

    let moduleIndex = 0;

    function addModule(contentType) {
        const container = document.getElementById("contentModules");

        let maxIndex = -1;
        const modules = container.querySelectorAll(".content-module");
        modules.forEach(module => {
            const positionInput = module.querySelector(".position-input");
            if (positionInput) {
                const index = parseInt(positionInput.value, 10);
                if (!isNaN(index)) {
                    maxIndex = Math.max(maxIndex, index);
                }
            }
        });

        const newIndex = maxIndex + 1;

        const newModule = document.createElement("div");
        newModule.classList.add("content-module");

        if (contentType === "Text") {
            newModule.innerHTML = `
                <div class="module-content">
                    <input type="hidden" name="contents[${newIndex}].ContentType" value="${contentType}" />
                    <label>Контент (${contentType}):</label>
                    <textarea name="contents[${newIndex}].Content" class="form-control" required></textarea>
                    <label>Позиция:</label>
                    <input type="number" name="contents[${newIndex}].Position" class="form-control position-input" value="${newIndex}" required />
                    <button type="button" class="move-up">Вверх</button>
                    <button type="button" class="move-down">Вниз</button>
                    <button type="button" onclick="removeModule(this)">Удалить</button>
                </div>
            `;
        } else if (contentType === "Image") {
            newModule.innerHTML = `
                <div class="module-content">
                    <input type="hidden" name="contents[${newIndex}].ContentType" value="${contentType}" />
                    <label>Контент (${contentType}):</label>
                    <input type="file" name="contents[${newIndex}].FormFile" class="form-control" accept="image/*" required />
                    <div class="image-preview" style="display: none;">
                        <img src="" alt="Preview" class="img-fluid" />
                    </div>
                    <label>Позиция:</label>
                    <input type="number" name="contents[${newIndex}].Position" class="form-control position-input" value="${newIndex}" required />
                    <button type="button" class="move-up">Вверх</button>
                    <button type="button" class="move-down">Вниз</button>
                    <button type="button" onclick="removeModule(this)">Удалить</button>
                </div>
            `;
        } else if (contentType === "Video") {
            newModule.innerHTML = `
                <div class="module-content">
                    <input type="hidden" name="contents[${newIndex}].ContentType" value="${contentType}" />
                    <label>Контент (${contentType}):</label>
                    <input type="file" name="contents[${newIndex}].FormFile" class="form-control" accept="video/*" required />
                   <div class="video-preview" style="display: none;">
                        <video controls class="video-fluid">
                            <source src="" type="video/mp4" />
                        </video>
                    </div>
                    <label>Позиция:</label>
                    <input type="number" name="contents[${newIndex}].Position" class="form-control position-input" value="${newIndex}" required />
                    <button type="button" class="move-up">Вверх</button>
                    <button type="button" class="move-down">Вниз</button>
                    <button type="button" onclick="removeModule(this)">Удалить</button>
                </div>
            `;
        }

        container.appendChild(newModule);

        const fileInput = newModule.querySelector('input[type="file"]');
        if (fileInput) {
            fileInput.addEventListener('change', function () {
                const file = this.files[0];
                const previewContainer = newModule.querySelector('.image-preview, .video-preview');
                if (file && previewContainer) {
                    const previewElement = previewContainer.querySelector('img, video');
                    const reader = new FileReader();
                    
                    reader.onload = function (e) {
                    if (file.type.startsWith('image')) {
                        previewElement.src = e.target.result;
                        previewContainer.style.display = 'block';
                    } else if (file.type.startsWith('video')) {
                        const sourceElement = previewElement.querySelector('source');
                        sourceElement.src = e.target.result;
                        previewElement.load(); 
                        previewContainer.style.display = 'block';
                        }
                    };
                    reader.readAsDataURL(file);
                }
            });
        }
    }

    function removeModule(button) {
        const module = button.closest(".content-module");
        if (module) {
            module.remove();
            updateModuleIndices();
        } else {
            console.error("Не удалось найти родительский элемент .content-module.");
        }
    }



    document.getElementById("addTextModule").addEventListener("click", () => addModule("Text"));
    document.getElementById("addImageModule").addEventListener("click", () => addModule("Image"));
    document.getElementById("addVideoModule").addEventListener("click", () => addModule("Video"));



    document.querySelector("#contentModules").addEventListener("click", function (event) {
        if (event.target.classList.contains("move-up")) {
            const module = event.target.closest(".content-module");
            moveModule(module, "up");
        } else if (event.target.classList.contains("move-down")) {
            const module = event.target.closest(".content-module");
            moveModule(module, "down");
        }
    });

    function moveModule(module, direction) {
        const allModules = Array.from(document.querySelectorAll(".content-module"));
        const currentIndex = allModules.indexOf(module);

        const newIndex = direction === "up" ? currentIndex - 1 : currentIndex + 1;

        if (newIndex >= 0 && newIndex < allModules.length) {
            const container = document.getElementById("contentModules");
            if (direction === "down") {
                container.insertBefore(module, allModules[newIndex + 1] || null);
            }
            else {
                container.insertBefore(module, allModules[newIndex]);
            }
            updateModuleIndices();
        }
    }

    function updateModuleIndices() {
    const modules = document.querySelectorAll("#contentModules .content-module");
    modules.forEach((module, index) => {
        const positionInput = module.querySelector(".position-input");
        if (positionInput) {
            positionInput.value = index; 
        }
    });
}
</script>
