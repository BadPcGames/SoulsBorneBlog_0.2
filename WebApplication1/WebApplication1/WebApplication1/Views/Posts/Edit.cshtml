@addTagHelper *, Microsoft.AspNetCore.Mvc.TagHelpers
@model WebApplication1.Models.PostViewModel
@{
    ViewData["Title"] = "Edit post";
}
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Фиксированный макет с прокручиваемым центральным блоком</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
</head>

<h1>Редактирование поста: @Model.Id</h1>

@if (ViewBag.Error != null)
{
    <div class="alert alert-danger">@ViewBag.Error</div>
}

<form asp-action="Edit" method="post" enctype="multipart/form-data">
    <input type="hidden" name="Id" value="@Model.Id" />
    <input type="hidden" name="BlogId" value="@Model.BlogId" />

    <h2>Название</h2>
    <input name="Title" value="@Model.Title" class="form-control" required />

    <h2>Гра</h2>
    <select id="gameSelect" name="Game" class="form-control" required>
        <option value="@Model.Game">@Model.Game</option>
    </select>

    <h2>Контент</h2>
    <div id="contentModules">
        @for (int i = 0; i < Model.Contents.Count; i++)
        {
            var content = Model.Contents[i];
            var base64 = Convert.ToBase64String(content.Content);
            var mimeType = content.ContentType == "Image" ? "image/png" :
                           content.ContentType == "Video" ? "video/mp4" : "application/octet-stream";

            <div class="content-module">
                <input type="hidden" name="contents[@i].ContentType" value="@content.ContentType" />
                <input type="hidden" name="contents[@i].Position" value="@i" class="position-input" />

                @if (content.ContentType == "Text")
                {
                    <label>Контент (Text):</label>
                    <textarea name="contents[@i].Content" class="form-control">@System.Text.Encoding.UTF8.GetString(content.Content)</textarea>
                }
                else
                {
                    <label>Предпросмотр:</label><br />

                    @if (content.ContentType == "Image")
                    {
                        <div class="image-preview" style="margin-bottom: 10px;">
                            <img src="data:@mimeType;base64,@base64" class="img-fluid" style="max-height: 200px;" />
                        </div>
                    }
                    else if (content.ContentType == "Video")
                    {
                        <div class="video-preview" style="margin-bottom: 10px;">
                            <video controls style="max-width: 100%; max-height: 240px;">
                                <source src="data:@mimeType;base64,@base64" type="@mimeType" />
                                Ваш браузер не поддерживает видео.
                            </video>
                        </div>
                    }

                    <input type="hidden" name="contents[@i].Content" value="@base64" />
                    <label>Заменить файл:</label>
                    <input type="file" name="contents[@i].FormFile" class="form-control file-converter" data-index="@i" />
                }

                <button type="button" class="move-up">Вверх</button>
                <button type="button" class="move-down">Вниз</button>
                <button type="button" onclick="removeModule(this)">Удалить</button>
            </div>
        }

    </div>

    <div class="buttons">
        <button type="button" id="addTextModule">Добавить текст</button>
        <button type="button" id="addImageModule">Добавить изображение</button>
        <button type="button" id="addVideoModule">Добавить видео</button>
    </div>

    <button type="submit" class="btn btn-primary">Сохранить изменения</button>
</form>

<script>
    function addModule(contentType) {
        const container = document.getElementById("contentModules");

        let maxIndex = -1;
        const modules = container.querySelectorAll(".content-module");
        modules.forEach(module => {
            const positionInput = module.querySelector(".position-input");
            if (positionInput) {
                const index = parseInt(positionInput.value, 10);
                if (!isNaN(index)) {
                    maxIndex = Math.max(maxIndex, index);
                }
            }
        });

        const newIndex = maxIndex + 1;

        const newModule = document.createElement("div");
        newModule.classList.add("content-module");

        if (contentType === "Text") {
            newModule.innerHTML = `
            <div class="module-content">
                <input type="hidden" name="contents[${newIndex}].ContentType" value="${contentType}" />
                <label>Контент (${contentType}):</label>
                <textarea name="contents[${newIndex}].Content" class="form-control" required></textarea>
                <label>Позиция:</label>
                <input type="number" name="contents[${newIndex}].Position" class="form-control position-input" value="${newIndex}" required />
                <button type="button" class="move-up">Вверх</button>
                <button type="button" class="move-down">Вниз</button>
                <button type="button" onclick="removeModule(this)">Удалить</button>
            </div>
        `;
        } else {
            newModule.innerHTML = `
            <div class="module-content">
                <input type="hidden" name="contents[${newIndex}].ContentType" value="${contentType}" />
                <label>Контент (${contentType}):</label>
                <input type="file" name="contents[${newIndex}].FormFile" class="form-control file-converter" data-index="${newIndex}" required />
                <label>Позиция:</label>
                <input type="number" name="contents[${newIndex}].Position" class="form-control position-input" value="${newIndex}" required />

                <!-- Превью для изображений и видео -->
                <div class="preview-container" style="margin-top: 10px;">
                    <div class="image-preview" style="display: none;">
                        <img src="" class="img-fluid" />
                    </div>
                    <div class="video-preview" style="display: none;">
                        <video controls class="video-fluid" style="max-width: 100%; max-height: 240px;">
                            <source src="" type="video/mp4" />
                        </video>
                    </div>
                </div>

                <button type="button" class="move-up">Вверх</button>
                <button type="button" class="move-down">Вниз</button>
                <button type="button" onclick="removeModule(this)">Удалить</button>
            </div>
        `;
        }



        container.appendChild(newModule);
    }

    document.addEventListener("change", function (e) {
        if (e.target.type === "file" && e.target.classList.contains("file-converter")) {
            const fileInput = e.target;
            const file = fileInput.files[0];
            if (!file) return;

            const parent = fileInput.closest('.module-content');
            const index = fileInput.getAttribute('data-index');

            const hiddenName = fileInput.name.replace("FormFile", "Content");
            const existingHidden = parent.querySelector(`input[name='${hiddenName}']`);
            if (existingHidden) existingHidden.remove();

            const hiddenInput = document.createElement("input");
            hiddenInput.type = "hidden";
            hiddenInput.name = hiddenName;
            parent.appendChild(hiddenInput);

            const reader = new FileReader();
            reader.onload = function (event) {
                const base64String = event.target.result.split(',')[1];
                hiddenInput.value = base64String;

                const previewContainer = parent.querySelector('.preview-container');
                const imagePreview = previewContainer.querySelector('.image-preview');
                const videoPreview = previewContainer.querySelector('.video-preview');

                if (file.type.startsWith("image")) {
                    imagePreview.style.display = "block";
                    videoPreview.style.display = "none";
                    const img = imagePreview.querySelector("img");
                    img.src = event.target.result;
                } else if (file.type.startsWith("video")) {
                    videoPreview.style.display = "block";
                    imagePreview.style.display = "none";
                    const video = videoPreview.querySelector("video");
                    const source = video.querySelector("source");
                    source.src = event.target.result;
                    video.load();
                }
            };
            reader.readAsDataURL(file);
        }
    });

    function removeModule(button) {
        const module = button.closest(".content-module");
        if (module) {
            module.remove();
            updateModuleIndices();
        } else {
            console.error("Не удалось найти родительский элемент .content-module.");
        }
    }

    document.getElementById("addTextModule").addEventListener("click", () => addModule("Text"));
    document.getElementById("addImageModule").addEventListener("click", () => addModule("Image"));
    document.getElementById("addVideoModule").addEventListener("click", () => addModule("Video"));

    function moveModule(module, direction) {
        const allModules = Array.from(document.querySelectorAll(".content-module"));
        const currentIndex = allModules.indexOf(module);
        const newIndex = direction === "up" ? currentIndex - 1 : currentIndex + 1;

        if (newIndex >= 0 && newIndex < allModules.length) {
            const container = document.getElementById("contentModules");
            if (direction === "down") {
                container.insertBefore(module, allModules[newIndex + 1] || null);
            } else {
                container.insertBefore(module, allModules[newIndex]);
            }
            updateModuleIndices();
        }
    }

    function updateModuleIndices() {
        const modules = document.querySelectorAll("#contentModules .content-module");
        modules.forEach((module, index) => {
            const positionInput = module.querySelector(".position-input");
            if (positionInput) {
                positionInput.value = index;
            }
            const fileInput = module.querySelector('.file-converter');
            if (fileInput) {
                fileInput.setAttribute('data-index', index);
                fileInput.name = fileInput.name.replace(/\[\d+\]/, `[${index}]`);
            }
        });
    }

    document.querySelector("#contentModules").addEventListener("click", function (event) {
        if (event.target.classList.contains("move-up")) {
            const module = event.target.closest(".content-module");
            moveModule(module, "up");
        } else if (event.target.classList.contains("move-down")) {
            const module = event.target.closest(".content-module");
            moveModule(module, "down");
        }
    });
</script>


