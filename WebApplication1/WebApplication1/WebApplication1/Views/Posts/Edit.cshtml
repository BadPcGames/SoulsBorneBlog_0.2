@addTagHelper *, Microsoft.AspNetCore.Mvc.TagHelpers
@model WebApplication1.Models.PostViewModel
@{
    ViewData["Title"] = "Edit post";
}
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Фиксированный макет с прокручиваемым центральным блоком</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/js/bootstrap.bundle.min.js"></script>
</head>

<h1>Редактор постов для блога: @Model.BlogId</h1>

<form asp-action="Create" asp-route-blogId="@Model.BlogId" id="postForm" method="post" enctype="multipart/form-data">
    <input type="hidden" name="BlogId" asp-for="BlogId" />

    <h2>Назва</h2>
    <input name="Title" asp-for="Title" class="form-control" required />
    <span asp-validation-for="Title" class="text-danger"></span>

    <h2>Гра</h2>
    <select id="gameSelect" name="Game" class="form-control" required>
        <option value="@Model.Game">@Model.Game</option>
    </select>
    <span asp-validation-for="Game" class="text-danger"></span>

    <h2>Контент</h2>
    <div id="contentModules">
        @if (Model.Contents != null)
        {
            @foreach (var content in Model.Contents)
            {
                <div class="content-module">
                    <input type="hidden" name="Contents[@content.Position].ContentType" value="@content.ContentType" />

                    @if (content.ContentType == "Text")
                    {
                        <label>Контент (Text):</label>
                        var value = System.Text.Encoding.UTF8.GetString(content.Content);
                        <textarea name="Contents[@content.Position].Content" class="form-control" required>@value</textarea>
                    }
                    else
                    {
                        string base64String = Convert.ToBase64String(content.Content);
                        string mimeType = content.ContentType == "Image" ? "image/png" : "video/mp4";
                        string fileName = content.ContentType == "Image" ? "image.png" : "video.mp4";
                        string inputId = $"fileInput-{content.Position}";

                        <label>Контент (@content.ContentType):</label>
                        <input type="file" id="@inputId" name="Contents[@content.Position].FormFile" class="form-control" required />

                    }

                    <label>Позиция:</label>
                    <input type="number" name="Contents[@content.Position].Position" class="form-control position-input" value="@content.Position" required />
                    <button type="button" onclick="removeModule(this)">Удалить</button>
                </div>
            }
        }
    </div>

    <div class="buttons">
        <button type="button" id="addTextModule">Добавить текст</button>
        <button type="button" id="addImageModule">Добавить изображение</button>
        <button type="button" id="addVideoModule">Добавить видео</button>
    </div>

    <button type="submit" class="btn btn-primary">Сохранить пост</button>
</form>

<script>
    $(document).ready(function () {
        $.ajax({
            url: '@Url.Action("GetGames", "Posts")',
            method: 'GET',
            success: function (games) {
                games.forEach(function (game) {
                    $("#gameSelect").append(`<option value="${game.gameName}">${game.gameName}</option>`);
                });
            },
            error: function () {
                console.error("Не удалось загрузить список игр.");
            }
        });
    });

    function clearHiddenFile(position) {
        document.getElementById(`hiddenFile-${position}`).value = ""; // Очистка скрытого поля
    }

    function addModule(contentType) {
        const container = document.getElementById("contentModules");
        const newIndex = container.children.length;
        const newModule = document.createElement("div");
        newModule.classList.add("content-module");

        if (contentType === "Text") {
            newModule.innerHTML = `
                <label>Контент (Text):</label>
                <textarea name="Contents[${newIndex}].Content" class="form-control" required></textarea>
            `;
        } else {
            newModule.innerHTML = `
                <label>Контент (${contentType}):</label>
                <input type="hidden" name="Contents[${newIndex}].ExistingFile" value="" id="hiddenFile-${newIndex}" />
                <input type="file" name="Contents[${newIndex}].FormFile" class="form-control" onchange="clearHiddenFile(${newIndex})" />
            `;
        }

        newModule.innerHTML += `
            <label>Позиция:</label>
            <input type="number" name="Contents[${newIndex}].Position" class="form-control position-input" value="${newIndex}" required />
            <button type="button" onclick="removeModule(this)">Удалить</button>
        `;
        container.appendChild(newModule);
    }

    function removeModule(button) {
        button.closest(".content-module").remove();
    }

    document.getElementById("addTextModule").addEventListener("click", () => addModule("Text"));
    document.getElementById("addImageModule").addEventListener("click", () => addModule("Image"));
    document.getElementById("addVideoModule").addEventListener("click", () => addModule("Video"));

</script>
