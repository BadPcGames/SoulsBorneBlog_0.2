@using Microsoft.JSInterop
@using WebApplication1.DbModels
@model PostViewModel
@{
    ViewData["Title"] = Model.Title+" ";
}
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script src="/js/util.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>

<style>
    .comment-avatar {
        border-radius: 50%;
        object-fit: cover;
    }

    .comment-box {
        margin-top: 20px;
    }

    .comment {
        border-bottom: 1px solid #ccc;
        padding: 15px 0;
    }

    .reaction-btn {
        margin-right: 10px;
    }

    .post-media {
        text-align: center;
    }

        .post-media img,
        .post-media video {
            max-width: 80%;
            max-height: 500px;
            border-radius: 8px;
            margin-bottom: 15px;
            display: block;
            margin-left: auto;
            margin-right: auto;
        }

    .share-buttons a {
        margin-right: 8px;
    }

    .postTitle {
        font-family: 'Cinzel', serif;
    }
    </style>
</head>
<body>
    <div class="container mt-4">
        <h1 class="display-4 postTitle text-center">@Model.Title</h1>
        <div class="my-4">
            <h5 class="text-muted text-center">Game: @Model.Game</h5>
            <div class="post-media">
                @foreach (var content in Model.Contents)
                {
                    if (content.ContentType == "Image")
                    {
                        var base64Image = Convert.ToBase64String(content.Content);
                        var imageSrc = $"data:image/png;base64,{base64Image}";
                        <img src="@imageSrc" alt="Image" />
                    }
                    else if (content.ContentType == "Video")
                    {
                        var videoSrc = $"data:video/mp4;base64,{Convert.ToBase64String(content.Content)}";
                        <video controls>
                            <source src="@videoSrc" type="video/mp4">
                        </video>
                    }
                    else
                    {
                        var textContent = System.Text.Encoding.UTF8.GetString(content.Content);
                        <p class="text-start">@textContent</p>
                    }
                }
            </div>

            <div id="reactions" class="my-3 text-center">
                <button id="like-button" class="btn btn-success reaction-btn">👍 Like  <span id="like-count" >0</span></button>
                <button id="dislike-button" class="btn btn-danger reaction-btn">👎 Dislike <span id="dislike-count">0</span></button>
                
            </div>

            <div class="mb-3 share-buttons text-center">
                <strong>Share:</strong><br />
                <a href="https://t.me/share/url?url=@@encodedPostUrl&text=@@message" class="btn btn-sm btn-primary" target="_blank">Telegram</a>
                <a href="https://twitter.com/intent/tweet?url=@@encodedPostUrl&text=@@message" style="color:white"class="btn btn-sm btn-info" target="_blank">Twitter</a>
                <a href="https://www.facebook.com/sharer/sharer.php?u=@@encodedPostUrl" class="btn btn-sm btn-primary" target="_blank">Facebook</a>
            </div>

            <h3 class="mt-4">Comments</h3>
            <div id="comments-container" class="comment-box"></div>

            <div class="mt-4">
                <h5>Leave a comment:</h5>
                <textarea id="comment-text" class="form-control mb-2" rows="3" placeholder="Your comment"></textarea>
                <button id="submit-comment" class="btn btn-primary">Submit</button>
            </div>
        </div>
    </div>
</body>

<script type="module">
    const postId = @Model.Id;
    import { checkAccess, getUserId, getUserRole } from '/js/site.js';

    async function makeComent(text) {
        $.ajax({
            url: '@Url.Action("MakeComent", "Posts")', // Используй точное имя метода
            method: 'POST',
            data: { text: text, postId: postId },
            success: function (response) {
                if (response.message !== "") alert(response.message);
                if (response.success) {
                    $('#comment-text').val("");
                    loadComments(postId);
                }
            },
            error: function (xhr) {
                console.error(xhr.responseText);
                if (xhr.status === 401) {
                    try {
                        let responseJson = JSON.parse(xhr.responseText);
                        if (responseJson.redirectUrl) {
                            window.location.href = responseJson.redirectUrl;
                            return;
                        }
                    } catch (e) {
                        console.error("Error parsing JSON response", e);
                    }
                }
                alert('Error while posting comment.');
            }
        });
    }

    $('#submit-comment').click(async function () {
        const text = $('#comment-text').val().trim();
        if (text === "") {
            alert("Comment cannot be empty!");
            return;
        }
        await makeComent(text);
    });

    $(document).ready(function () {
        loadComments(postId);
    });

    async function loadComments(postId) {
        try {
            let comments = await $.ajax({
                url: '/Posts/GetComents',
                method: 'GET',
                data: { postId: postId }
            });

            $('#comments-container').empty();

            for (let comment of comments) {
                let canChangeText = comment.canChange ? "Editable" : "Not editable";
                let role = await getUserRole();
                let id = await getUserId();

                let commentHtml = `
                        <div class="card mb-3 shadow-sm comment" data-id="${comment.id}">
                            <div class="card-body d-flex">
                                <img src="data:image/png;base64,${comment.authorAvatar}" alt="Avatar" class="rounded-circle me-3" width="50" height="50">
                                <div class="w-100">
                                    <h6 class="card-title mb-1">
                                        <strong>${comment.authorName}</strong>
                                        <small class="text-muted">(${canChangeText})</small>
                                    </h6>
                                    <p class="card-text comment-text">${comment.text}</p>
                                    <div class="mt-2">
                    `;
                if (id == comment.authorId || role === "Admin" || role === "Moder") {
                    commentHtml += `<button class="btn btn-danger btn-sm me-2 delete-btn" data-id="${comment.id}" data-post-id="${postId}">Delete</button>`;
                }

                if (id == comment.authorId && comment.canChange) {
                    commentHtml += `<button class="btn btn-primary btn-sm edit-btn" data-id="${comment.id}">Edit</button>`;
                }

                commentHtml += `
                                    </div>
                                </div>
                            </div>
                        </div>
                    `;

                $('#comments-container').append(commentHtml);
            }
        } catch (error) {
            alert('Error loading comments.');
            console.error(error);
        }
    }


    $(document).on('click', '.edit-btn', function () {
        let commentDiv = $(this).closest('.comment');
        let commentText = commentDiv.find('.comment-text').text().trim();
        let commentId = $(this).data('id');

        let editForm = `
                <textarea class="form-control edit-text mb-2">${commentText}</textarea>
                <button class="btn btn-success btn-sm save-edit me-2" data-id="${commentId}">Save</button>
                <button class="btn btn-secondary btn-sm cancel-edit">Cancel</button>
            `;

        commentDiv.find('.comment-text').replaceWith(editForm);
    });


    $(document).on('click', '.save-edit', async function () {
        let commentDiv = $(this).closest('.comment');
        let newText = commentDiv.find('.edit-text').val();
        let commentId = $(this).data('id');

        try {
            await $.ajax({
                url: '/Posts/EditComment',
                method: 'POST',
                data: { id: commentId, text: newText },
                success: function (response) {
                    if (response.message != "") alert(response.message);
                    if (response.success) {
                        $('#comment-text').val("");
                        loadComments(postId);
                    }
                },
                error: function (xhr) {
                    console.error(xhr.responseText);
                    alert('Error while editing comment.');
                }
            });
        } catch (error) {
            alert('Error updating comment.');
            console.error(error);
        }
    });

    // Cancel edit
    $(document).on('click', '.cancel-edit', function () {
        let commentDiv = $(this).closest('.comment');
        let originalText = commentDiv.find('.edit-text').val();
        commentDiv.find('.edit-text').replaceWith(`<p class="card-text comment-text">${originalText}</p>`);
        commentDiv.find('.save-edit, .cancel-edit').remove();
    });

    // Delete button
    $(document).on('click', '.delete-btn', function () {
        let commentId = $(this).data('id');
        let postId = $(this).data('post-id');
        deleteComment(commentId, postId);
    });

    function deleteComment(commentId, postId) {
        if (checkAccess()) {
            $.ajax({
                url: '@Url.Action("DeleteComment", "Posts")',
                method: 'POST',
                data: { commentId: commentId },
                success: function () {
                    loadComments(postId);
                },
                error: function (xhr) {
                    console.error(xhr.responseText);
                    alert('Error deleting comment.');
                }
            });
        }
    }

    async function updateReactions() {
        $.ajax({
            url: '@Url.Action("GetLikes", "Posts")',
            method: 'GET',
            data: { postId: postId },
            success: function (data) {
                $('#like-count').text(data);
            }
        });

        $.ajax({
            url: '@Url.Action("GetDisLikes", "Posts")',
            method: 'GET',
            data: { postId: postId },
            success: function (data) {
                $('#dislike-count').text(data);
            }
        });
    }

    async function makeReaction(value) {
        $.ajax({
            url: '@Url.Action("MakeReactions", "Posts")',
            method: 'POST',
            data: { value: value, postId: postId },
            success: function (response) {
                if (response.message !== "") alert(response.message);
                if (response.success) {
                    updateReactions();
                }
            },
            error: function (xhr) {
                console.error(xhr.responseText);
                if (xhr.status === 401) {
                    try {
                        let responseJson = JSON.parse(xhr.responseText);
                        if (responseJson.redirectUrl) {
                            window.location.href = responseJson.redirectUrl;
                            return;
                        }
                    } catch (e) {
                        console.error("Error parsing JSON response", e);
                    }
                }
                alert('Error while setting reaction.');
            }
        });
    }

    $('#like-button').click(function () {
        makeReaction(1);
    });

    $('#dislike-button').click(function () {
        makeReaction(-1);
    });

    updateReactions();
</script>






   
