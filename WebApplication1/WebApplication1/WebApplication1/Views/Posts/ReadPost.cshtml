@using Microsoft.JSInterop
@using WebApplication1.DbModels
@model PostViewModel
@{
    ViewData["Title"] = Model.Title+" ";
}

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-EVSTQN3/azprG1Anm3QDgpJLIm9Nao0Yz1ztcQTwFspd3yD65VohhpuuCOmLASjC" crossorigin="anonymous">
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/js/bootstrap.bundle.min.js" integrity="sha384-MrcW6ZMFYlzcLA8Nl+NtUVF0sA7MsXsP1UyJoMp4YLEuNSfAP+JcXn/tWtIaxVXM" crossorigin="anonymous"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/js/bootstrap.min.js" integrity="sha384-cVKIPhGWiC2Al4u+LWgxfKTRIcfu0JTxR+EQDz/bgldoEyl4H0zUF0QKbrJ0EcQF" crossorigin="anonymous"></script>

    <style>
        .posts{
            border-radius: 5px;
            border: solid 5px;
            padding: 5px;
            margin: 15px;
        }
    </style>
</head>
<body>
    <h1>@Model.Title</h1>

    <div class="posts">
        <h3>Game - @Model.Game</h3>

        @foreach (var content in Model.Contents)
        {
            if (content.ContentType == "Image")
            {
                var base64Image = Convert.ToBase64String(content.Content);
                var imageSrc = $"data:image/png;base64,{base64Image}";
                <div>
                    <img src="@imageSrc" alt="Image" class="img-fluid" />
                </div>
            }
            else if (content.ContentType == "Video")
            {
                var videoSrc = $"data:video/mp4;base64,{Convert.ToBase64String(content.Content)}";
                <video width="320" height="240" controls>
                    <source src="@videoSrc" type="video/mp4">
                </video>
            }

            else
            {
                var textContent = System.Text.Encoding.UTF8.GetString(content.Content);
                <div>
                    <p>@textContent</p>
                </div>
            }
        }
        <div id="reactions">
            <button id="like-button">👍 Like</button>
            <span id="like-count">0</span>

            <button id="dislike-button">👎 Dislike</button>
            <span id="dislike-count">0</span>
        </div>

        <h1>Комментарии</h1>

        <div id="comments-container"></div>

        <div>
            <h3>Оставить комментарий:</h3>
            <textarea id="comment-text" placeholder="Ваш комментарий"></textarea><br>
            <button id="submit-comment">Отправить комментарий</button>
        </div>

    </div>
</body>

<script type="module">

    const postId = @Model.Id;
    import { checkAccess,getUserId,getUserRole } from '/js/site.js';
    
     async function makeComent(text) {
        if (checkAccess()) {
            $.ajax({
                url: '@Url.Action("MakeComent", "Posts")',
                method: 'POST',
                data: { text: text, postId: postId },
                success: function (response) {
                    if (response.message != "")
                        alert(response.message);
                    if (response.success) {
                        $('#comment-text').val("");
                        loadComments(postId);
                    }
                },
                error: function (xhr) {
                    console.error(xhr.responseText);
                    alert('Error setting reaction.');
                }
            });
        }   
    }

    $('#submit-comment').click(function () {
        const text = $('#comment-text').val().trim(); 
        if (text === "") {
            alert("Комментарий не может быть пустым!");
            return;
        }
        makeComent(text); 
    });

    $(document).ready(function () {
        loadComments(postId);
    });

    async function loadComments(postId) {
        try {
            let comments = await $.ajax({
                url: '/Posts/GetComents',
                method: 'GET',
                data: { postId: postId }
            });

            $('#comments-container').empty();

            for (let comment of comments) {
                let canChangeText = comment.canChange ? "Можно изменить" : "Невозможно изменить";
                let commentHtml = `
                    <div class="comment" data-id="${comment.id}">
                        <p><strong>${comment.authorName}</strong> (${canChangeText}):</p>
                        <p class="comment-text">${comment.text}</p>
                        <img src="data:image/png;base64,${comment.authorAvatar}" alt="Avatar" width="50" height="50">
                `;

                let role = await getUserRole();
                let id = await getUserId();

                if (id == comment.authorId || role == "Admin" || role == "Moder") {
                    commentHtml += `<button class="delete-btn" data-id="${comment.id}" data-post-id="${postId}">Удалить</button>`;
                }

                if (comment.canChange) {
                    commentHtml += `<button class="edit-btn" data-id="${comment.id}">Изменить</button>`;
                }

                commentHtml += "<hr></div>";
                $('#comments-container').append(commentHtml);
            }
        } catch (error) {
            alert('Ошибка загрузки комментариев');
            console.error(error);
        }
    }

    $(document).on('click', '.edit-btn', function () {
        let commentDiv = $(this).closest('.comment');
        let commentText = commentDiv.find('.comment-text').text();
        let commentId = $(this).data('id');

        let editForm = `
            <textarea class="edit-text">${commentText}</textarea>
            <button class="save-edit" data-id="${commentId}">Сохранить</button>
            <button class="cancel-edit">Отмена</button>
        `;

        commentDiv.find('.comment-text').replaceWith(editForm);
    });

    $(document).on('click', '.save-edit', async function () {
        let commentDiv = $(this).closest('.comment');
        let newText = commentDiv.find('.edit-text').val();
        let commentId = $(this).data('id');

        try {
            await $.ajax({
                url: '/Posts/EditComment',
                method: 'POST',
                data: { id: commentId, text: newText },
                success: function (response) {
                    if (response.message != "")
                        alert(response.message);
                    if (response.success) {
                        $('#comment-text').val("");
                        loadComments(postId);
                    }
                },
                error: function (xhr) {
                    console.error(xhr.responseText);
                    alert('Error setting reaction.');
                }

            });

            commentDiv.find('.edit-text').replaceWith(`<p class="comment-text">${newText}</p>`);
            commentDiv.find('.save-edit, .cancel-edit').remove();
        } catch (error) {
            alert('Ошибка изменения комментария');
            console.error(error);
        }
    });

    $(document).on('click', '.cancel-edit', function () {
        let commentDiv = $(this).closest('.comment');
        let originalText = commentDiv.find('.edit-text').text();
        commentDiv.find('.edit-text').replaceWith(`<p class="comment-text">${originalText}</p>`);
        commentDiv.find('.save-edit, .cancel-edit').remove();
    });



    $(document).on('click', '.delete-btn', function () {
        let commentId = $(this).data('id');
        let postId = $(this).data('post-id');
        deleteComment(commentId, postId);
    });

    function deleteComment(commentId, postId) {
        if (checkAccess()) {
            $.ajax({
                url: '@Url.Action("DeleteComment", "Posts")',
                method: 'POST',
                data: { commentId: commentId },
                success: function () {
                    loadComments(postId);
                },
                error: function (xhr) {
                    console.error(xhr.responseText);
                    alert('Ошибка при удалении комментария.');
                }
            });
        }
    }
    

    async function updateReactions() {
        $.ajax({
            url: '@Url.Action("GetLikes", "Posts")',
            method: 'GET',
            data: { postId: postId }, 
            success: function (data) {
                $('#like-count').text(data);
            }
        });

        $.ajax({
            url: '@Url.Action("GetDisLikes", "Posts")',
            method: 'GET',
            data: { postId: postId }, 
            success: function (data) {
                $('#dislike-count').text(data);
            }
        });
    }



    async function makeReaction(value) {
        $.ajax({
            url: '@Url.Action("MakeReactions", "Posts")',
            method: 'POST',
            data: { value: value, postId: postId },
            success: function (response) {
                if (response.message!="")
                    alert(response.message);
                if (response.success) {
                    updateReactions();
                }
            },
            error: function (xhr) {
                console.error(xhr.responseText);
                alert('Error setting reaction.');
            }
        });
    }

    $('#like-button').click(function () {
        makeReaction(1);
    });

    $('#dislike-button').click(function () {
        makeReaction(-1);
    });
    updateReactions();
</script>




   
