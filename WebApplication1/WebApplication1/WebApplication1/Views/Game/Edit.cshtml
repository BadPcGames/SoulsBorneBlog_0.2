@using WebApplication1.DbModels
@model Game
@{
    ViewData["Title"] = "Edit Game";
}

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Edit Game</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <style>
        #fileInput {
            display: none;
        }

        #image {
            cursor: pointer;
            max-width: 100%;
            height: auto;
            border-radius: 8px;
            border: 1px solid #ccc;
        }

        .color-box {
            padding: 20px;
            border-radius: 10px;
            transition: background-color 0.3s ease;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        }

        textarea, input[type="text"] {
            width: 100%;
            resize: vertical
        }

        .form-label {
            font-weight: 500;
            margin-bottom: 0.5rem;
        }
    </style>
</head>

<body class="bg-light">
    <div class="container py-5">
        <h2 class="mb-4">Edit Game</h2>
        <form id="gameForm" asp-action="Edit" asp-controller="Game" method="post" enctype="multipart/form-data">
            <div class="mb-3">
                <label for="favcolor" class="form-label">Select Background Color</label>
                <input type="color" id="favcolor" name="Color" class="form-control form-control-color" value="@Model.Color" />
            </div>

            <div class="color-box" id="colorBox" style="background-color:@Model.Color;">
                <div class="row mb-3">
                    <div class="col-md-12">
                        <label for="GameName" class="form-label">Game Name</label>
                        <input type="text" class="form-control" name="GameName" value="@Model.GameName" required />
                    </div>
                </div>

                <div class="row mb-4">
                    <div class="col-md-8">
                        <label for="Description" class="form-label">Description</label>
                        <textarea class="form-control" name="Description" rows="6" required>@Model.Description</textarea>
                    </div>
                    <div class="col-md-4 d-flex flex-column align-items-center justify-content-center">
                        @{
                            var base64Image = Convert.ToBase64String(Model.GameCharacter);
                            var imageSrc = $"data:image/png;base64,{base64Image}";
                        }
                        <label class="form-label">Click the image to change it</label>
                        <img id="image" src="@imageSrc" alt="Game Character" class="img-fluid mb-2" />
                        <input type="file" id="fileInput" name="GameCharacter" accept="image/*" />
                    </div>
                </div>
            </div>

            <button type="submit" class="btn btn-success mt-4">Save Changes</button>
        </form>
    </div>

    <script>
        const image = document.getElementById('image');
        const fileInput = document.getElementById('fileInput');
        const form = document.getElementById('gameForm');
        const colorPicker = document.getElementById('favcolor');
        const colorBox = document.getElementById('colorBox');

        image.addEventListener('click', () => {
            fileInput.click();
        });

        fileInput.addEventListener('change', (event) => {
            const file = event.target.files[0];
            if (file) {
                const reader = new FileReader();
                reader.onload = (e) => {
                    image.src = e.target.result;
                };
                reader.readAsDataURL(file);
            }
        });

        colorPicker.addEventListener('input', () => {
            colorBox.style.backgroundColor = colorPicker.value;
        });

        image.addEventListener('load', () => {
            const canvas = document.createElement('canvas');
            const ctx = canvas.getContext('2d');
            canvas.width = image.naturalWidth;
            canvas.height = image.naturalHeight;
            ctx.drawImage(image, 0, 0);
            canvas.toBlob((blob) => {
                const file = new File([blob], 'image.png', { type: 'image/png' });
                const dataTransfer = new DataTransfer();
                dataTransfer.items.add(file);
                fileInput.files = dataTransfer.files;
            }, 'image/png');
        });
    </script>
</body>
